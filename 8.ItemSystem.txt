아이템 시스템
Item System

. 트리거 박스를 활용한 아이템 상자 구현
. 다양한 종류의 아이템에 대한 개별적인 습득 처리 구현
. 소프트오브젝트 레퍼런스와 하드오브젝트 레퍼런스 차이 이해


트리거 박스 설정
. 루트에 트리거를 설정하고 자식에 메시 컴포넌트 부착
. 이펙트는 기본 값으로 비활성화 상태로 두고 오버랩 이벤트 발생시 발동
. 이펙트 종료시 액터 제거

아이템 애셋 설계
. 3 가지 종류의 아이템 타입 설정 (Weapon, Potion, Scroll)
. 무기타입 : 캐릭터에 무기 부착(무기에 의한 부가 스탯 강화)
. 포션타입 : 캐릭터 HP 회복
. 스크롤타입 : 캐릭터의 기본 스탯 상승

ItemData를 부모 클래스로 상속받은 세가지 종류의 아이템 클래스 선언


의존성 분리를 위한 설계 규칙
프로젝트의 주요 레이어
. 데이터 레이어 : 게임을 구성하는 기본 데이터( 스탯 정보, 캐릭터 레벨 테이블...)
. 미들웨어 레이어 : 게임에 사용되는 미들웨어 모듈( UI, 아이템, 애니메이션, AI...)
. 게임 레이어 : 게임 로직을 구체적으로 구현하는데 사용( 캐릭터, 게임 모드...)
. 위에서 아래로는 직접 참조하되, 아래에서 위로는 인터페이스를 통해 접급하도록 설정



소프트 레퍼런싱 vs 하드 레퍼런싱
. 액터 로딩시 TObjectPtr로 선언한 언리얼 오브젝트도 따라서 메모리에 로딩됨
. 이를 하드 레퍼런싱이라고 함
. 게임 진행에 필수적인 언리얼 오브젝트는 이렇게 선언해도 되지만 아이템의 경우
. 데이터 라이브러리에 1000종의 아이템 목록이 있을 때  이를 다 로딩할 것인가
. 필요한 데이터만 로딩하도록 TSoftObjectPtr로 선언하고 대신 애셋 주소 문자열을 지정
. 필요시에 애셋을 로딩하도록 구현을 변경할 수 있으나 애셋 로딩 시간이 소요됨
. 현재 게임에서 로딩되어 있는 스켈레탈 매시의 목록 살펴보기



정리
아이템 상자와 캐릭터 적용
1. 기믹 구현을 위한 트리거 액터 설계
2. 데이터 애셋을 활용한 아이템 데이터 관링
3. 의존성 분리를 위한 설계 구현
4. 메모리 최적화를 위한 소프트 레퍼런싱 구현


